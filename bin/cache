#!/usr/bin/env ruby

# Command line options
options = {
  help:       {flags: %w[-h --help],    value: false, desc: 'This help screen'},
  clear:      {flags: %w[-c --clear],   value: false, desc: 'Clear the cached results'},
  force:      {flags: %w[-f --force],   value: false, desc: 'Run the command even if it has a cached result'},
  list:       {flags: %w[-l --list],    value: false, desc: 'List a summary of each cached command'},
  full_list:  {flags: %w[--full-list],  value: false, desc: 'List the entire contents of the cache'},
  dir:        {value: "/tmp/commandline-cache"}
}
options[:dir][:pattern] = File.join(options[:dir][:value], '*')
options[:help][:screen] = <<HELP_SCREEN
Usage: cache [opts] program [program-args]

Given an expensive, but deterministic program, prepend "cache" to its invocation.
This will run the program the first time and cache the output, then use the
cached values in subsequent invocations.  The cached values are stdout, stderr,
and exit status.

Example:

    $ time cache ruby -e '10.times { |i| sleep 1; print i }; puts'
    0123456789
           10.30 real         0.15 user         0.05 sys

    $ time cache ruby -e '10.times { |i| sleep 1; print i }; puts'
    0123456789
            0.19 real         0.09 user         0.03 sys

Options:
HELP_SCREEN
options.each do |name, option|
  next unless option[:flags]
  line = sprintf "  %-15s %s\n", option[:flags].join(", "), option[:desc]
  options[:help][:screen] << line
end

options.singleton_class.class_eval do
  options.keys.each do |key|
    define_method(key) { |subkey=:value| fetch(key).fetch(subkey) }
    define_method("#{key}?") { !!fetch(key).fetch(:value) }
  end
end

require 'open3'
def self.run(command)
  stdout, stderr, status = Open3.capture3 *command
  { :command => command,
    :time    => Time.now.to_i,
    :stdout  => stdout,
    :stderr  => stderr,
    :status  => status.exitstatus,
  }
end

require 'json'
require 'base64'
def self.write_cache(path, invocation)
  File.write path, JSON.dump(
    **invocation,
    stdout: Base64.encode64(invocation[:stdout]),
    stderr: Base64.encode64(invocation[:stderr]),
  )
  invocation
end

def self.read_cache(path)
  return nil unless File.exist? path
  invocation = JSON.parse File.read(path), symbolize_names: true
  invocation[:stdout] = Base64.decode64 invocation[:stdout]
  invocation[:stderr] = Base64.decode64 invocation[:stderr]
  invocation
end

require 'digest'
def self.filename_for(command)
  # We hash the command to get a string that is highly probable to be unique,
  # this way we have a key we can use to store / look up the cache, based on
  # the command that is being run. We choose #hexdigest over #digest,
  # and #base64digest because they all generate the same data,
  # they just represent it differently:
  #   #digest         returns a string with binary data in it
  #   #hexdigest      translates binary to hex values so all chars are 0-F
  #   #base64digest   base64 encodes digest, which is shorter than hexdigest,
  #                   but can lead to invalid filenames (eg a could have a slash in it)
  Digest::MD5.hexdigest(command.inspect)
end


# Process flags until the first nonflag
loop do
  arg = ARGV.first
  _, option = options.find do |name, option|
    flags = option.fetch(:flags, [])
    flags.include? arg
  end
  break unless option
  option[:value] = true
  ARGV.shift
end

# What's left in ARGV is the command to run
command = ARGV

# Normalize the state of the world so that we can always assume a temp dir
require 'fileutils'
tempdir = options.dir
FileUtils.mkdir_p tempdir

# Otherwise, we calculate the cache file by hashing the args that make up the command
filepath = File.join tempdir, filename_for(command)

def self.print(stream, to_print)
  stream.print to_print
rescue Errno::EPIPE
  # don't fail if they close the stream (eg when piping it into `head`)
end

def self.puts(stream, to_print)
  stream.puts to_print
rescue Errno::EPIPE
end


case
when options.help?
  $stdout.puts options.help(:screen)
when options.clear?
  FileUtils.rm_r tempdir
when options.list?
  invocations = Dir[options.dir :pattern].map { |path| read_cache path }
  invocations.each do |invocation|
    summary = {
      stdout_length: invocation[:stdout].length,
      stderr_length: invocation[:stderr].length,
      exitstatus:    invocation[:status],
      command:       invocation[:command],
    }
    puts $stdout, JSON.dump(summary)
  end
when options.full_list?
  invocations = Dir[options.dir :pattern].map { |path| read_cache path }
  puts $stdout, JSON.pretty_generate(invocations)
else
  invocation = read_cache(filepath)

  if options.force? || !invocation
    command    = invocation.fetch :command if invocation
    invocation = run command
    write_cache filepath, invocation
  end

  print $stderr, invocation[:stderr]
  print $stdout, invocation[:stdout]
  exit           invocation[:status]
end
