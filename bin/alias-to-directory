#!/usr/bin/env ruby --disable-gems --disable-rubyopt

class AliasToDirectory
  Definition = Struct.new :alias, :directory

  def initialize(raw_definitions, argv)
    @raw_definitions, @argv = raw_definitions, argv
  end

  def self.help_text
    "HELP SCREEN"
  end

  # returns primary_output_string   (e.g. print it to stdout)
  #         info_output_string      (e.g. print it to stderr)
  #         whether_program_errored (e.g. false implies exit status 0)
  def call
    @result ||= begin
      definitions = parse_defs @raw_definitions
      flags, args = parse_args @argv
      output      = ''
      info_output = ''
      had_error   = false

      if flags.include?('-h') || flags.include?('--help')
        return self.class.help_text, "", false
      end

      aliases_with_no_directories = definitions.reject(&:directory)
      if aliases_with_no_directories.any?
        info_output << "The following aliases are missing directories:\n"
        aliases_with_no_directories.each do |definition|
          info_output << "  #{definition.alias}\n"
        end
        had_error = true
      end

      conflicting_definitions =
        definitions.group_by(&:alias)
                   .reject { |a, ds| ds.map(&:directory).uniq.size == 1 }
      if conflicting_definitions.any?
        info_output << "Multiple aliases with conflicting directories:\n"
        conflicting_definitions.each do |a, definitions|
          info_output << "  #{a}\n"
          definitions.each { |d| info_output << "    #{d.directory}\n" }
        end
        had_error = true
      end

      if definitions.empty?
        info_output << "You must provide a list of directories to match on stdin"
        had_error = true
      end

      if args.empty?
        info_output << "No alias was provided!\n"
        info_output << self.class.help_text
        had_error = true
      end

      if 1 < args.size
        info_output << "You provided #{args.size} aliases (#{args.inspect}), but should have only provided one\n"
        info_output << self.class.help_text
        had_error = true
      end

      unless had_error
        provided_alias = args.first

        definition = definitions.find { |definition| definition.alias == provided_alias }
        partial_matched_definitions = definitions.select do |definition|
          definition.alias.start_with? provided_alias
        end

        if definition
          output << definition.directory
        else
          info_output << "No matches, here are partial matches:\n"
          partial_matched_definitions.each do |definition|
            info_output << "  #{definition.alias}  #{definition.directory}\n"
          end
          had_error = true
        end
      end
      [output, info_output, had_error]
    end
  end

  private

  def parse_args(argv)
    argv.each_with_object([[], []]) do |arg, (flags, args)|
      (arg.start_with?('-') ? flags : args) << arg
    end
  end

  def parse_defs(raw_definitions)
    raw_definitions
      .lines
      .reject { |line| line =~ /^\s*$/ }
      .map { |raw_definition| Definition.new *raw_definition.strip.split(/\s+/, 2) }
  end
end



if $0 !~ /rspec/
  # tap so that local vars up here don't override let blocks down below
  AliasToDirectory.new($stdin.read, ARGV).call.tap do |output, info_output, had_error|
    $stdout.print output
    $stderr.print info_output
    exit !had_error
  end
else
  RSpec.configure &:disable_monkey_patching!

  # https://gist.github.com/JoshCheek/09f01dcced9bea02360d
  module ::RSpec::Core::MemoizedHelpers::ClassMethods
    def lets!(*names, &definition)
      lets(*names, &definition)
      before { names.each &method(:__send__) }
    end

    def lets(*names, &definition)
      definition_class = self
      names.each do |name|
        let name do
          namespace = __memoized.fetch [definition_class, names] do |key|
            values = instance_eval(&definition).to_ary
            names.size < values.size && raise("Too few definition names (#{names.inspect}) for #{values.size} returned values")
            names.size > values.size && raise("Too many definition names (#{names.inspect}) for #{values.size} returned values")
            __memoized[key] = Hash[names.zip values]
          end
          namespace.fetch(name)
        end
      end
    end
  end

  gem 'rspec', '~> 3.0' # I think this should blow it up if an incompatible version is used, not totally sure

  RSpec.describe 'alias-to-directory' do
    def call(aliases, argv)
      AliasToDirectory.new(aliases, argv).call
    end

    def expect_result(aliases, argv, expected)
      output, info_output, had_error = call(aliases, argv)
      expect(info_output).to be_empty
      expect(had_error   ).to be_falsy
      expect(output      ).to eq expected
    end

    def expect_info_matches(aliases, argv, *expected_patterns)
      _, info_output, _ = call(aliases, argv)
      expected_patterns.each do |expected_pattern|
        expect(info_output).to match expected_pattern
      end
    end

    def expect_error(aliases, argv)
      *, had_error = call(aliases, argv)
      expect(had_error).to be_truthy
    end

    context 'reading alias list' do
      it 'reads the list as "alias1 dir1\n alias2 dir2\n ..."' do
        aliases = "alias1 dir1\n alias2 dir2"
        expect_result aliases, ['alias1'], 'dir1'
        expect_result aliases, ['alias2'], 'dir2'
      end

      it 'doesn\'t care about trailing newline in the alias list' do
        expect_result "alias dir",   ['alias'], 'dir'
        expect_result "alias dir\n", ['alias'], 'dir'
      end

      it "doesn't care about leading/trailing whitespace" do
        expect_result " \t    alias dir    \t  ",   ['alias'], 'dir'
      end

      it "doesn't care about whitespace between the alias and dir" do
        expect_result "alias  \t    dir",   ['alias'], 'dir'
      end

      it "treats all whitespace after the first one as being part of the path" do
        expect_result "alias d i r",   ['alias'], 'd i r'
      end

      it 'ignores blank lines' do
        expect_result "a b

                       c d

                       e f

                       ", ['c'], 'd'
      end
    end

    context 'when the alias definition list is empty' do
      lets(:output, :info_output, :had_error) { call "", ["a"] }
      it('has nothing in the output string')  { expect(output).to be_empty }
      it('says so in the info string')        { expect(info_output).to include "must provide a list" } # kinda fragile
      it('has an error')                      { expect(had_error).to be_truthy }
    end

    context 'when alias has no directory' do
      let(:alias_name) { 'alias-with-no-dir' }

      it 'says so and errors' do
        expect_info_matches alias_name, [alias_name], /missing director/i
        expect_info_matches alias_name, [alias_name], /#{alias_name}/
        expect_error alias_name, [alias_name]
      end
    end

    context 'when there is an alias match' do
      lets(:output, :info_output, :had_error) { call "a d", ['a'] }
      it('outputs the directory')  { expect(output      ).to eq "d" }
      it('it has no error output') { expect(info_output).to be_empty }
      it('exits with 0')           { expect(had_error   ).to be_falsy }
    end


    context 'when same alias multiple times' do
      context 'with same directory' do
        lets(:output, :info_output, :had_error) { call "a d\na d", ['a'] }
        it('outputs the match only once') { expect(output).to eq "d" }
        it('does not have error output') { expect(info_output).to be_empty }
        it('has no error')               { expect(had_error).to equal false }
      end

      context 'with different directories' do
        let(:alias_defs) { "a d1\n a d2" }
        it('has an error') { expect_error alias_defs, ['a'] }
        it 'says so in error output' do
          expect_info_matches alias_defs, ['a'], /conflicting director/i, /\ba\b/, /\bd1\b/, /\bd2\b/
        end
      end
    end

    context 'when there is a partial alias match' do
      lets(:output, :info_output, :had_error) { call "ab 1\nac 2", ["a"] }

      specify('output is empty') { expect(output).to be_empty }
      it('exits with 1') { expect(had_error).to be_truthy }

      it 'shows possible matches in info string' do
        expect(info_output).to match /no matches/i
        expect(info_output).to match /ab\s+1/
        expect(info_output).to match /ac\s+2/
      end
    end

    context 'when a search alias is not provided' do
      lets(:output, :info_output, :had_error) { call 'a d', [] }
      it 'has no output' do
        expect(output).to eq ''
      end

      it 'says this is the issue in the info output' do
        expect(info_output).to match /no alias/i
      end

      it 'includes help in info string' do
        expect(info_output).to include AliasToDirectory.help_text
      end

      it 'exits with 1 if not given args' do
        expect(had_error).to equal true
      end
    end

    context 'when more than one search alias is provided' do
      lets(:output, :info_output, :had_error) { call 'a d', ['a', 'b'] }
      it 'has no output' do
        expect(output).to eq ''
      end

      it 'says this is the issue in the info output' do
        expect(info_output).to match /2 aliases/i
      end

      it 'includes help in info string' do
        expect(info_output).to include AliasToDirectory.help_text
      end

      it 'exits with 1 if not given args' do
        expect(had_error).to equal true
      end
    end

    context '--help, -h' do
      let(:directory_name) { 'DIRECTORY_NAME' }

      def for_each
        ['-h', '--help'].each do |flag|
          yield call('', [flag])
          yield call('a', [flag])
          yield call("a #{directory_name}", ['a', flag])
        end
      end

      it 'outputs help' do
        for_each { |output, *| expect(output).to eq AliasToDirectory.help_text }
      end

      it 'does not output a directory match' do
        for_each { |output, *| expect(output).to_not include directory_name }
      end

      it 'has no error output, even if it would otherwise exist' do
        for_each { |_, info_output| expect(info_output).to be_empty }
      end

      it 'has no errors, even if they would otherwise exist' do
        for_each { |*, had_error| expect(had_error).to be_falsy }
      end
    end
  end
end
