#!/usr/bin/env ruby --disable-gems --disable-rubyopt

module LineEnds
  extend self

  def escaped_for(input)
    parse(input)
      .select { |index, type, chars| type == :line_end }
      .map    { |index, type, chars| chars.gsub("\n", "\\n").gsub("\r", "\\r") }
  end

  def tr_to(new_line_end, input, outstream)
    parse(input).each do |index, type, chars|
      case type
      when :char     then outstream << chars
      when :line_end then outstream << new_line_end
      else raise "shouldn't happen!"
      end
    end
    outstream
  end

  private

  attr_accessor :previous_char, :endings

  def parse(text)
    endings   = []
    prev_type = :null
    prev_char = ""

    text.each_char.with_index do |char, index|
      if char != "\r" && char != "\n" # not a line end
        endings << [
          index,
          prev_type = :char,
          prev_char = char,
        ]
      elsif prev_type == :line_end && prev_char != char # not a continuation of previous line end
        prev_char << char
        prev_type = :null
        prev_char = ""
      else # new line end
        endings << [
          index,
          prev_type = :line_end,
          prev_char = char,
        ]
      end
    end

    endings
  end
end



if $0 !~ /rspec/
  filename, new_line_end, * = ARGV
  File.open filename, 'r' do |file|
    if new_line_end
      LineEnds.tr_to(new_line_end, file, $stdout)
    else
      LineEnds.escaped_for(file).each { |ending| puts ending }
    end
  end
else

  gem 'rspec', '~> 3.0'
  require 'stringio'

  BodyHasNotBeenSet = Module.new

  RSpec.describe 'line_ends binary' do
    before { @body = BodyHasNotBeenSet }

    def write_file(body)
      @body = body
    end

    def expect_ends(*ends)
      expect(LineEnds.escaped_for @body).to eq ends
    end

    describe 'no args: display ends' do
      it 'works for strings and streams' do
        expect(LineEnds.escaped_for "\n").to eq ['\n']
        expect(LineEnds.escaped_for StringIO.new "\n").to eq ['\n']
      end

      it 'outputs nothing for an empty file' do
        write_file ""
        expect_ends #none
      end

      describe 'outputs each ending on its own line for a file with no empty lines' do
        example '\n' do
          write_file "abc\n"
          expect_ends '\n'
        end

        it '\r\n' do
          write_file "abc\r\n"
          expect_ends '\r\n'
        end

        it '\n\r' do
          write_file "abc\n\r"
          expect_ends '\n\r'
        end

        it '\r' do
          write_file "abc\r"
          expect_ends '\r'
        end

        it '\n \r\n \n\r \n \r' do
          write_file "abc\ndef\r\nghi\n\rjkl\nmno\r"
          expect_ends '\n', '\r\n', '\n\r', '\n', '\r'
        end
      end

      context 'outputs each ending on its own line for a file with empty lines' do
        example '\n' do
          write_file "\n\n"
          expect_ends '\n', '\n'
        end

        example '\r' do
          write_file "\r\r"
          expect_ends '\r', '\r'
        end

        example '\r\n' do
          write_file "\r\n\r\n"
          expect_ends '\r\n', '\r\n'
        end

        example '\n\r' do
          write_file "\n\r\n\r"
          expect_ends '\n\r', '\n\r'
        end

        example '\n\r' do
          write_file "\n\r\n\r"
          expect_ends '\n\r', '\n\r'
        end

        example '\n\r\r is seen as two line ends' do
          write_file "\n\r\r"
          expect_ends '\n\r', '\r'
        end
      end
    end

    describe 'arg: new line-end replaces any discovered ends' do
      def rewrite_ends(new_end)
        @result = LineEnds.tr_to(new_end, @body, "")
      end

      def assert_file(expected)
        expect(@result).to eq expected
      end

      it 'works for strings and streams' do
        expect(LineEnds.tr_to "x", "a\n\rb\n", "").to eq 'axbx'
        expect(LineEnds.tr_to "x", StringIO.new("a\n\rb\n"), "").to eq 'axbx'

        LineEnds.tr_to "x", "a\n\rb\n", out=StringIO.new
        expect(out.string).to eq "axbx"
      end

      it 'does not modify the original' do
        original = "ab\ncd\r\n"
        write_file original
        rewrite_ends "!"
        expect(original).to eq "ab\ncd\r\n"
      end

      example 'to a non-line end character' do
        write_file "abc\ndef\r\nghi\n\rjkl\nmno\r"
        rewrite_ends "!"
        assert_file "abc!def!ghi!jkl!mno!"
      end

      example 'to a line-end character' do
        write_file "abc\ndef\r\nghi\n\rjkl\nmno\r"
        rewrite_ends "\n"
        assert_file "abc\ndef\nghi\njkl\nmno\n"
      end

      example 'to a multiline string' do
        write_file "abc\ndef\r\nghi\n\rjkl\nmno\r"
        rewrite_ends "<12>"
        assert_file "abc<12>def<12>ghi<12>jkl<12>mno<12>"
      end
    end
  end
end
