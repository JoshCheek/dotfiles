#!/usr/bin/env ruby --disable-gems --disable-rubyopt

class FileMatcher
  def initialize(options={})
    self.options = options
  end

  def match?(name)
    name = name.chomp
    matches_matchers?(name) && passes_file_constraints?(name)
  end

  private

  attr_accessor :options

  def matches_matchers?(name)
    matchers.all? { |matcher| name =~ matcher }
  end

  def passes_file_constraints?(name)
    return File.file?      name if files_only?
    return File.directory? name if directories_only?
    File.file?(name) || File.directory?(name)
  end

  def matchers
    Array options[:matchers]
  end

  def files_only?
    !allow_directories? && !directories_only?
  end

  def directories_only?
    options[:directories_only]
  end

  def allow_directories?
    options[:allow_directories]
  end
end

class FileMatcher
  class OptionParser
    def initialize(args)
      self.args = args
    end

    def parse
      @parsed ||= args.each_with_object(matchers: []) do |arg, hash|
        case arg
        when '-a', '--allow-directories' then hash[:allow_directories] = true
        when '-d', '--directories-only'  then hash[:directories_only]  = true
        when '-h', '--help'              then hash[:help]              = help_screen
        else                                  hash[:matchers]         << Regexp.new(arg)
        end
        hash.delete :allow_directories if hash[:directories_only]
      end
    end

    def help_screen
      <<-HELP_SCREEN.gsub /^      /, ''
      Usage: pfile [options] [patterns-to-filter-with]

      Options:
          -a, --allow-directories          Print directories as well as files
          -d, --directories-only           Print only directories and no files
          -h, --help                       This help screen

      Patterns to filter with:
          Unescaped regex bodies, each line of output must match all of these
      HELP_SCREEN
    end

    private

    attr_accessor :args
  end
end


if $0 !~ /rspec/
  options = FileMatcher::OptionParser.new(ARGV).parse
  if options[:help]
    $stderr.puts options[:help]
  else
    finder  = FileMatcher.new options
    $stdin.each { |name| puts name if finder.match? name }
  end
else
  require 'fakefs/safe'

  describe FileMatcher do
    RSpec::Matchers.define :match_names do |*names|
      file_matcher = nil
      match do |matcher|
        file_matcher = matcher
        names.all? { |name| file_matcher.match? name }
      end

      failure_message_for_should do
        names.reject { |name| file_matcher.match? name }.map(&:inspect).join(", ") << " should have matched but didn't"
      end

      failure_message_for_should_not do
        names.select { |name| file_matcher.match? name }.map(&:inspect).join(", ") << " should not have matched, but did"
      end
    end

    def matcher_for(options={})
      described_class.new(options)
    end

    alias match_name match_names
    alias matcher    matcher_for

    before :all do
      FakeFS.activate!
      File.open("file1", "w") { |f| f.write "body1" }
      File.open("file2", "w") { |f| f.write "body2" }
      Dir.mkdir  "dir1"
    end

    after :all do
      FakeFS.deactivate!
    end

    it 'does not match nonexistent things' do
      matcher.should_not match_name ''
    end

    it 'ignores newlines' do
      matcher.should match_names "file1\n", "file2"
    end

    it 'matches names that match the regex matcher list' do
      matcher_for(matchers: [/.1/     ]).should match_name "file1"
      matcher_for(matchers: [/.1/, /f/]).should match_name "file1"
    end

    it 'does not match names that do not match the all the regexes in the matcher list' do
      matcher_for(matchers: [/.1/     ]).should_not match_name "file2"
      matcher_for(matchers: [/.1/, /x/]).should_not match_name "file1"
    end

    it 'matches all files when there are no matchers provided' do
      matcher.should match_name 'file1'
    end

    describe 'options' do
      context 'none' do
        it 'matches files but not directories' do
          matcher.should match_name 'file1'
          matcher.should_not match_name 'dir1'
        end
      end

      context 'allow_directories: true' do
        it 'matches files and directories' do
          matcher_for(allow_directories: true).should match_names 'file1', 'dir1'
        end
      end

      context 'directories_only: true' do
        it 'matches directories but not files' do
          matcher_for(directories_only: true).should match_name 'dir1'
          matcher_for(directories_only: true).should_not match_name 'file1'
        end
      end
    end
  end

  describe FileMatcher::OptionParser do
    def parse(options)
      described_class.new(options).parse
    end

    it 'only sets :matchers when no flags are provided' do
      parse([]).to_hash.should == {matchers: []}
    end

    it 'parses -a and --allow-directories to allow_directories: true' do
      parse(['-a'                 ])[:allow_directories].should be_true
      parse(['--allow-directories'])[:allow_directories].should be_true
    end

    it 'parses -d and --directories-only to directories_only: true' do
      parse(['-d'                ])[:directories_only].should be_true
      parse(['--directories-only'])[:directories_only].should be_true
    end

    it 'when both -a and -d are provided, -d supercedes -a' do
      [%w[-a                  -d]                ,
       %w[-a                  --directories-only],
       %w[--allow-directories --directories-only],
       %w[--allow-directories -d]                ].each do |args|
        parse(args)[:directories_only].should be_true
        parse(args)[:allow_directories].should be_false
      end
    end

    it 'parses -h and --help to the help screen' do
      parse(%w[-h]     )[:help].should =~ /^\s*Usage/
      parse(%w[-h -d a])[:help].should =~ /^\s*Usage/
    end

    it 'parses non options to regexp matchers' do
      parse(%w[a -a b]).should == {allow_directories: true, matchers: [/a/, /b/]}
    end
  end
end
