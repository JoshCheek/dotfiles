#!/usr/bin/env ruby --disable-gems --disable-rubyopt

require 'shellwords'
begin
  # looks like this might be a good all-environment alternative: https://github.com/guard/listen
  require 'rb-fsevent'
rescue LoadError
  $stderr.puts 'Looks like you need to `gem install rb-fsevent` or fix your $LOAD_PATH or something'
  exit 1
end

help_screen = <<HELP
Usage: ifchange [WATCHPATH]* [-IGNOREPATH]* --then 'shell command'

  EXAMPLE: ifchange lib spec --then rspec
    (if lib or spec change, then run `rspec`)

  You can receive the directory with the change as an argument by passing '{}'

Flags:
  -h or --help   # this screen
  -PATH          # ignore this path
  - [PATH]       # everything after the dash is treated as a watch dir
  --then SCRIPT  # what to do when you see the change

Maybe in the future (but prob not, I'm lazy):
  * Expand splats
  * Allow path1 --then command1   path1 --then command1
  * The shell escaping seems annoying, e.g. this won't work as a result:
    $ ifchange . -log -tmp --then 'echo {} >> changes_seen'
  * Error if no watchpath provided
  * Error if watch path and ignore path are the same
  * Debug flag so user can see how invocation expands
HELP

module IfChange
  class Flags
    attr_accessor :show_help, :watch_paths, :ignore_paths, :responders
    alias show_help? show_help

    def initialize
      @show_help    = false
      @watch_paths  = []
      @ignore_paths = []
      @responders   = []
    end
  end

  def self.responder_from(shell_invocation)
    lambda do |path|
      Shellwords.split(shell_invocation)
                .map { |word| word.gsub('{}', path) }
    end
  end

  def self.fullpath(cwd, path)
    File.expand_path(path, cwd)
  end

  def self.parse_args(cwd, args)
    args  = args.dup
    flags = Flags.new
    until args.empty?
      arg = args.shift
      case arg
      when '-h', '--help' then flags.show_help = true
      when '--then'       then flags.responders << responder_from(args.shift)
      when '-'            then flags.watch_paths.concat args.map { |path| fullpath cwd, path }
      when /\A-(.*)/      then flags.ignore_paths << fullpath(cwd, $1)
      else                     flags.watch_paths  << fullpath(cwd, arg)
      end
    end
    flags
  end
end

if $0 !~ /rspec/
  flags   = IfChange.parse_args(Dir.pwd, ARGV)
  if flags.show_help?
    puts help_screen
  else
    fsevent = FSEvent.new
    fsevent.watch(flags.watch_paths) do |paths|
      paths.uniq.each do |path|
        next if flags.ignore_paths.any? { |ignore_path| path.start_with? ignore_path }
        flags.responders.each { |responder| system *responder.call(path) }
      end
    end
    fsevent.run
  end
else
  describe 'parsing options' do
    def call(cwd, args)
      IfChange.parse_args(cwd, args)
    end

    it 'does not mutate the input array' do
      ary = ['-h']
      call '/', ary
      expect(ary).to eq ['-h']
    end

    it 'sets show_help? on -h and --help' do
      expect(call('/', []).show_help?).to be_falsy
      expect(call('/', ['-h']).show_help?).to be_truthy
      expect(call('/', ['--help']).show_help?).to be_truthy
    end

    it 'aggregates non-flags into expanded watch_paths' do
      expect(call('/a',      [   ]).watch_paths).to eq [   ]
      expect(call('/a',      ['a']).watch_paths).to eq ['/a/a']
      expect(call('/a/',     ['a']).watch_paths).to eq ['/a/a']
      expect(call('/a/b',    ['a']).watch_paths).to eq ['/a/b/a']
      expect(call('/a/b/..', ['a']).watch_paths).to eq ['/a/a']
      expect(call('/a',      ['b', '-h', 'c', '--help']).watch_paths).to eq ['/a/b', '/a/c']
    end

    it 'aggregates -unknown-flag into expanded ignore_paths' do
      expect(call('/a', []).ignore_paths).to eq [  ]
      expect(call('/a', ['-not-a-flag']).ignore_paths).to eq ['/a/not-a-flag']
      expect(call('/a', %w[path --help -not-a-flag -h -other-dir]).ignore_paths).to eq ['/a/not-a-flag', '/a/other-dir']
    end

    it 'considers everything after a dash to be an include filename' do
      expect(call('/a', ['-h']).watch_paths).to eq []
      expect(call('/a', ['-', '-h']).watch_paths).to eq ['/a/-h']
      expect(call('/a', ['-', '--help']).watch_paths).to eq ['/a/--help']
      expect(call('/a', ['-', '-other']).watch_paths).to eq ['/a/-other']
    end

    it 'aggregates --then into responders' do
      expect(call('/a/b/c', []).responders).to eq []
      expect(call('/a/b/c', ['--then', 'something']).responders.map { |r| r.call "some/path" }).to eq [['something']]
      expect(call('/a/b/c', ['--help', '--then', 'something', 'path', '--then', 'other', 'another-path']).responders.map { |r| r.call "irrelevant/path" }).to eq [['something'], ['other']]

      responder = call('/a', ['--then', 'omg']).responders.first
      expect(responder.arity).to eq 1
    end

    describe 'responders' do
      def call(shell_program)
        IfChange.responder_from shell_program
      end

      it 'considers "{}" as a macro to be filled in with the changed path' do
        expect(call('a{}b').call('C')).to eq ['aCb']
        expect(call('a{{}b').call('C')).to eq ['a{Cb']
        expect(call('a{{}}b').call('C')).to eq ['a{C}b']
        expect(call('a{}b{}c').call('D')).to eq ['aDbDc']
      end

      it 'shell splits the result' do
        expect(call("a {}").call("A B")).to eq ["a", "A B"]

        expect(
          call("/path/to/prog --arg 'some val' --arg2 'some {} val2'").call("A B")
        ).to eq ["/path/to/prog", "--arg", "some val", "--arg2", "some A B val2"]
      end
    end
  end
end
