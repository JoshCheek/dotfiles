#!/usr/bin/env ruby --disable-gems --disable-rubyopt
require 'shellwords'

# explanation of how hard it was to figure out how to escape this shit
# https://gist.github.com/JoshCheek/4194d82c27986a535368
def translate_regex(omit, string_pattern)
  regexp = Regexp.new(string_pattern, Regexp::IGNORECASE).inspect.gsub("'", "'\\\\''")
  regexp = "!#{regexp}" if omit
  regexp
end

run_command     = true
verbose         = false
show_help       = false
absolute        = false
find_args       = ""
find_dir        = "."
regexes         = []

until ARGV.empty?
  arg = ARGV.shift
  case arg
  when '--help'               then show_help = true; run_command = false
  when '--in'                 then find_dir  = ARGV.shift&.chomp("/") || raise("Must provide an argument with #{arg}")
  when '--dir', '--directory' then find_args << " -type d"
  when '--file'               then find_args << " -type f"
  when '--absolute'           then absolute  = true
  when '--verbose'            then verbose   = true
  when '--dry-run'            then verbose   = true; run_command = false
  when '--edit'               then exec "vim #{__FILE__}"
  else
    /\A(?<omit>-)?(?<pattern>.*)\n?\z/ =~ arg
    regexes << translate_regex(omit, pattern)
  end
end

if show_help
  puts "Usage: #{$0} [--verbose] [--absolute] [--dir | --file] [--in DIR] [match-pattern*] [-omit-pattern*]"
  puts ""
  puts "  * Finds files/dirs"
  puts "  * non-flags are considered match patterns"
  puts "  * non-flags beginning with dashes are considered omit patterns"
  puts ""
  puts "Arguments:"
  puts "  --help     # this help screen"
  puts "  --in DIR   # only search in dir, defaults to CWD"
  puts "  --dir      # only find directories"
  puts "  --file     # only find files"
  puts "  --absolute # print full path of each result"
  puts "  --verbose  # print command to stderr before running it"
  puts "  --dry-run  # verbose and don't run command"
  puts "  --edit     # edit this script"
end

pipeline = []
pipeline << "find #{find_dir.shellescape}#{find_args}"
pipeline << "ruby -ne 'print File.expand_path(File.absolute_path($_))'" if absolute
pipeline << "ruby -ne 'print if #{regexes.join ' && '}'"                if regexes.any?

$stderr.puts pipeline.join " |\n  " if verbose
exec         pipeline.join " | "    if run_command
